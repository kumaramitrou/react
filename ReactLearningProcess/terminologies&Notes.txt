* Higher Order Component.
* Media Query in CSS.
* Styled Components.
* Tagged Template.
* CSS Modules: External CSS file access, in react-script 2 and above we no need to eject we can simply rename css file to .module.css 
 and do the same.
* Stateless(Presentational/Dumb Component) is usually functional component. vs stateful component,
* Class based component, Functional Component.
* Class Based Component : Have Access to State, Lifecycle Hooks supported. Access State and props via "this",
			Use if you need to manage State or access to Lifecycle Hooks and you don't want to use React Hooks!
  Functional Components : Access to State (useState()). Lifecycle Hooks not supported. Access Props via "props"
			Use in all other Cases.

* Component Lifecycle:Available in class based components.
			We can add below mentioned components  in "class based Components" and React will execute it for us
		constructor()
		getDerivedStateFromProps()
		getSnapshotBeforeUpdate()
		componentDidCatch()
		componentWillUnmount()
		shouldComponentUpdate()
		componentDidUpdate()
		componentDidMount()
		render()
Component Lifecycle (Creation): constructor(props) --> getDerivedStateFromProps(props, state) -->
		render() --> Render Child Components --> componentDidMount()

Component Lifecycle (Update): getDerivedStateFromProps(props,state) --> shouldComponentUpdate(nextProps, nextState)
		--> render() --> Update Child Component Props --> getSnapshotBeforeUpdate(prevProps, prevState)

* Auxiliary component does the same thing as React.Fragment does.
* we call setState() synchronously but its not guaranteed that it is executed immediately or currently, react schedules
	setState(), and whenever it gets resources it updates the state.
better way to do is return an anonymous function which will get executed, so that no dirty read should happen.
* Using prop-types, npm install --save prop-types to set up prop types so that no wrong type should get passed.
* Ref keyword. to focus on last input. Can pass a function and the element you get is reference to that element.
ref = {(inputEl) => {this.inputElement = inputEl}}